/* interFill_interpolate.hsl
 *      Actually do the fill.
 *
 */
// inputs
vector	$A ;
input   	$A <<0.0, 0.0, 0.0>> ;

vector	$B ;
input  	$B <<1.0, 1.0, 1.0>> ;

int	   $STEPS ;
input   	$STEPS 10 ;

int     	$POS ;
input   	$POS 1 ;


// Get Mode
string $MODE  = `getGlobalStringVar "__MODE__"`  ;
string $ORDER = `getGlobalStringVar "__ORDER__"` ;

vector $update ;

float $alpha, $pos, $steps ;
$steps =  float( $STEPS ) +1 ;
$pos = float( $POS ) +1 ; // so 1st value is not A

if( $MODE == "LINEAR" ){
	$alpha = $pos / $steps ;
	$update = ($A * $alpha) + ($B * (1.0 - $alpha)) ;
} else if( $MODE == "CONCAVE" ){
	$alpha = $pos / $steps ;
	if( $ORDER == "FIRST" ) {
		$alpha = $alpha * $alpha ;
	} else {
		// 2nd order
		$alpha = $alpha * $alpha * $alpha ;
	}
	$update = ($A * $alpha) + ($B * (1.0 - $alpha)) ;
} else if( $MODE == "CONVEX" ){
	$alpha = $pos / $steps ;
	if( $ORDER == "FIRST" ) {
		$alpha = 1.0 - ( (1.0 - $alpha) * (1.0 - $alpha) ) ;
	} else {
		// 2nd order
		$alpha = 1.0 - ( (1.0 - $alpha) * (1.0 - $alpha) * (1.0 - $alpha) ) ;
	}
	$update = ($A * $alpha) + ($B * (1.0 - $alpha)) ;
} else if( $MODE == "SMOOTH" ){
	$alpha = $pos / $steps ;
	if( $ORDER == "FIRST" ) {
		// smoothstep  3x^2 - 2x^3
		$alpha = (($alpha ^ 2.0) * 3.0) - (2.0 * ($alpha ^ 3.0)) ;
	} else {
		// Perlin's 2nd order 6x^5 - 15x^4 + 10x^3
        $alpha = (6.0 * ($alpha ^ 5.0)) - (15.0 * ($alpha ^ 4.0)) + (10.0 * ($alpha ^ 3.0)) ;
	}
	$update = ($A * $alpha) + ($B * (1.0 - $alpha)) ;
}
//print $update ;
return $update ;